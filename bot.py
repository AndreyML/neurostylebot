from aiogram.contrib.middlewares.logging import LoggingMiddleware

import logging
import nst
import os
import state
from state import Test
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from shutil import copyfile
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from settings import (BOT_TOKEN, HEROKU_APP_NAME,
                      WEBHOOK_URL, WEBHOOK_PATH,
                      WEBAPP_HOST, WEBAPP_PORT)

logging.basicConfig(level=logging.INFO)

# initialize Bot
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())


# start message
@dp.message_handler(commands=['start'], state=None)
async def send_welcome(message: types.Message):
    # keyboard
    markup_general = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_general = types.KeyboardButton('–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ')

    markup_general.add(button_general)

    await bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, {0.first_name}!\n–Ø - <b>{1.first_name}</b>, –±–æ—Ç, —Å—Ç–∏–ª–∏–∑—É—é—â–∏–π'
                                            '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –î–∞–≤–∞–π —è –ø—Ä–µ–≤—Ä–∞—â—É —Ç–≤–æ–µ —Ñ–æ—Ç–æ –≤ –∫–∞—Ä—Ç–∏–Ω—É!'.format(
        message.from_user, await bot.get_me()),
                           parse_mode='html', reply_markup=markup_general)
    await bot.send_message(message.chat.id, '–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? ‚û°Ô∏è /help')
    await Test.first()


# help
@dp.message_handler(commands=['help'], state=Test.P1)
async def help_message(message: types.Message):
    await bot.send_message(message.chat.id,
                           '–Ø —É–º–µ—é –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å —Å—Ç–∏–ª—å —Å –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ –Ω–∞ –¥—Ä—É–≥–æ–µ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏. –¢–µ–±–µ '
                           '–ª–∏—à—å –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Ñ–æ—Ç–æ –∏ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å—Ç–∏–ª–µ–π."')


# chat
@dp.message_handler(content_types=['text'], state=Test.P1)
async def chat1(message: types.Message):
    if message.chat.type == 'private':
        if message.text == '–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ':
            await bot.send_message(message.chat.id,
                                   '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å. '
                                   '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è, —á—Ç–æ–±—ã –æ–±—ä–µ–∫—Ç –Ω–∞ —Ñ–æ—Ç–æ —Ä–∞—Å–ø–æ–ª–∞–≥–∞–ª—Å—è –ø–æ —Ü–µ–Ω—Ç—Ä—É, —Ç–∞–∫ –∫–∞–∫ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ '
                                   '–æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ –∫–∞–¥—Ä–∏—Ä—É–µ—Ç—Å—è.')
        else:
            await bot.send_message(message.chat.id, '–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å :(')


# save photo

@dp.message_handler(content_types=['photo'], state=Test.P1)
async def handle_photo1(message: types.Message, state: FSMContext):
    await message.photo[-1].download('./images/styles/content_image.jpg')
    await bot.send_message(message.chat.id, '–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!')
    await bot.send_message(message.chat.id, '–ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å ')
    style_reply_markup = types.InlineKeyboardMarkup(row_width=2, one_time_keyboard=True)
    style_reply_button1 = types.InlineKeyboardButton('–°–∏–¥—è—â–∞—è –æ–±–Ω–∞–∂–µ–Ω–Ω–∞—è', callback_data='picasso')
    style_reply_button2 = types.InlineKeyboardButton('–ó–≤–µ–∑–¥–Ω–∞—è –Ω–æ—á—å', callback_data='van_gogh')
    style_reply_button3 = types.InlineKeyboardButton('–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏—Å—Å–∫—É—Å—Ç–≤–æ', callback_data='current')
    style_reply_button4 = types.InlineKeyboardButton('–°–≤–æ–µ —Ñ–æ—Ç–æ —Å—Ç–∏–ª—è', callback_data='svoi')

    style_reply_markup.add(style_reply_button1, style_reply_button2, style_reply_button3, style_reply_button4)

    media = types.MediaGroup()
    media.attach_photo(types.InputFile('images/styles/picasso.jpg'), '–°–∏–¥—è—â–∞—è –û–±–Ω–∞–∂–µ–Ω–Ω–∞—è')
    media.attach_photo(types.InputFile('images/styles/van_gogh.jpg'), '–ó–≤–µ–∑–¥–Ω–∞—è –Ω–æ—á—å')
    media.attach_photo(types.InputFile('images/styles/current.jpg'), '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏—Å—Å–∫—É—Å—Ç–≤–æ')

    await bot.send_media_group(chat_id=message.chat.id, media=media)
    await bot.send_message(message.chat.id, '–ú–æ–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã: ', reply_markup=style_reply_markup)


@dp.message_handler(content_types=['photo'], state=Test.P2)
async def handle_photo2(message: types.Message, state: FSMContext):
    await message.photo[-1].download('./images/styles/mystyle_image.jpg')
    await bot.send_message(message.chat.id, '–ü–æ–ª—É—á–∏–ª')
    copyfile('images/styles/mystyle_image.jpg', 'images/styles/style_image.jpg')
    await state.finish()
    await launch_nst(message)


# callback
@dp.callback_query_handler(lambda call: True, state=Test.P1)
async def callback_inline1(call):
    try:
        if call.message:
            if call.data == 'van_gogh':
                await bot.send_message(call.message.chat.id, '–Ø —Ç–æ–∂–µ –ª—é–±–ª—é –∏–º–ø—Ä–µ—Å—Å–∏–æ–Ω–∏–∑–º! ')
                copyfile('images/styles/van_gogh.jpg', 'images/styles/style_image.jpg')
                await launch_nst(call.message)
            elif call.data == 'picasso':
                await bot.send_message(call.message.chat.id, '–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –≤—ã–±–æ—Ä!')
                copyfile('images/styles/picasso.jpg', 'images/styles/style_image.jpg')
                await launch_nst(call.message)
            elif call.data == 'current':
                await bot.send_message(call.message.chat.id, '–ì–ª—É–±–æ–∫–æ')
                copyfile('images/styles/current.jpg', 'images/styles/style_image.jpg')
                await launch_nst(call.message)
            elif call.data == 'svoi':
                await bot.send_message(call.message.chat.id,
                                       '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Å —á–µ–º-—Ç–æ –Ω–æ–≤—ã–º! C–∫–∏–Ω—å –º–Ω–µ —Å–≤–æ–µ —Ñ–æ—Ç–æ —Å—Ç–∏–ª—è')

            # remove inline buttons
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='...',
                                        reply_markup=None)
            await Test.next()

    except Exception as e:
        print(repr(e))


async def launch_nst(message):
    # print('ok')
    content_image_name = 'images/styles/content_image.jpg'
    style_image_name = 'images/styles/style_image.jpg'
    content = open(content_image_name, 'rb')
    style = open(style_image_name, 'rb')

    await bot.send_message(message.chat.id, '–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É. –ü–µ—Ä–µ–Ω–æ—Å —Å—Ç–∏–ª—è –∑–∞–π–º–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ 15 –º–∏–Ω—É—Ç ')

    await nst.main(content_image_name, style_image_name)

    await bot.send_message(message.chat.id, '–ì–æ—Ç–æ–≤–æ!')
    result = open('images/result/result.jpg', 'rb')
    await bot.send_photo(message.chat.id, result)

    result_reply_markup = types.InlineKeyboardMarkup(row_width=2)
    result_reply_button1 = types.InlineKeyboardButton('–í–∞—É, —à–∏–∫–∞—Ä–Ω–æ!', callback_data='amazing')
    result_reply_button2 = types.InlineKeyboardButton('–•–æ—Ä–æ—à–æ', callback_data='nice')
    result_reply_button3 = types.InlineKeyboardButton('–ù–æ—Ä–º–∞–ª—å–≤–Ω–æ', callback_data='ok')
    result_reply_button4 = types.InlineKeyboardButton('–û–π...–∫–æ—à–º–∞—Ä', callback_data='gross')

    result_reply_markup.add(result_reply_button1, result_reply_button2, result_reply_button3, result_reply_button4)

    await bot.send_message(message.chat.id, '–ù—É, –∫–∞–∫ —Ç–µ–±–µ?', reply_markup=result_reply_markup


@dp.callback_query_handler(lambda call: True, state=Test.P2)
async def callback_inline2(call):
    try:
        if call.message:
            # result feedback
            if call.data == 'amazing':
                await bot.send_message(call.message.chat.id, '–†–∞–¥ —á—Ç–æ —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å!')
            elif call.data == 'nice':
                await bot.send_message(call.message.chat.id, '–°—É–ø–µ—Ä!')
            elif call.data == 'ok':
                await bot.send_message(call.message.chat.id, '–ú–æ–∂–µ—Ç, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —É –º–µ–Ω—è –ª—É—á—à–µ –ø–æ–ª—É—á–∏—Ç—Å—è. üòï')
            elif call.data == 'gross':
                await bot.send_message(call.message.chat.id, '–ù–∞–¥–µ—é—Å—å, —ç—Ç–æ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –º–µ–∂–¥—É –Ω–∞–º–∏... üëâüëà')

            # remove inline buttons
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='...',
                                        reply_markup=None)
            await Test.first()

            await bot.send_message(call.message.chat.id, '–•–æ—á–µ—à—å –µ—â–µ —Ä–∞–∑? –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å '
                                                         '—Å—Ç–∏–ª–∏–∑–æ–≤–∞—Ç—å')

    except Exception as e:
        print(repr(e))


@dp.callback_query_handler(lambda call: True, state=None)
async def callback_inline3(call):
    try:
        if call.message:
            # result feedback
            if call.data == 'amazing':
                await bot.send_message(call.message.chat.id, '–†–∞–¥ —á—Ç–æ —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å!')
            elif call.data == 'nice':
                await bot.send_message(call.message.chat.id, '–°—É–ø–µ—Ä!')
            elif call.data == 'ok':
                await bot.send_message(call.message.chat.id, '–ú–æ–∂–µ—Ç, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —É –º–µ–Ω—è –ª—É—á—à–µ –ø–æ–ª—É—á–∏—Ç—Å—è. üòï')
            elif call.data == 'gross':
                await bot.send_message(call.message.chat.id, '–ù–∞–¥–µ—é—Å—å, —ç—Ç–æ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –º–µ–∂–¥—É –Ω–∞–º–∏... üëâüëà')

            # remove inline buttons
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='...',
                                        reply_markup=None)
            await Test.first()

            await bot.send_message(call.message.chat.id, '–•–æ—á–µ—à—å –µ—â–µ —Ä–∞–∑? –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å '
                                                         '—Å—Ç–∏–ª–∏–∑–æ–≤–∞—Ç—å')

    except Exception as e:
        print(repr(e))


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
